- name: 在 node 节点创建相关目录
  file: path={{ item }} state=directory
  with_items:
    - /opt/kube/kube-system

- name: 获取所有已经创建的POD信息
  command: "{{ base_dir }}/plugins/kube/kubectl get pod --all-namespaces --kubeconfig={{base_dir}}/.cluster/admin.kubeconfig"
  register: pod_info
  connection: local
  run_once: true

- name: 获取已下载离线镜像信息
  command: "ls {{ base_dir }}/requires"
  register: download_info
  connection: local
  run_once: true

- block:
    # DNS文件中部分参数根据hosts文件设置而定，因此需要用template模块替换参数
    - name: 准备DNS部署Yaml文件
      template: src={{ item }}.yaml.j2 dest={{ role_path }}/files/dns/{{ item }}.yaml
      with_items:
        - kubedns
        - coredns
      connection: local
      run_once: true
    - block:
        - name: 尝试推送离线{{ dns_backend }}镜像（若执行失败，可忽略）
          copy: src={{ base_dir }}/requires/{{ dns_offline }} dest=/opt/kube/images/{{ dns_offline }}
          when: 'dns_offline in download_info.stdout'
        - name: 获取{{ dns_backend }}离线镜像推送情况
          command: "ls /opt/kube/images"
          register: image_info
        - name: 导入{{ dns_backend }}的离线镜像（若执行失败，可忽略）
          shell: "{{ bin_dir }}/docker load -i /opt/kube/images/{{ dns_offline }}"
          when: 'dns_offline in image_info.stdout and CONTAINER_RUNTIME == "docker"'
        - name: 导入{{ dns_backend }}的离线镜像（若执行失败，可忽略）
          shell: "{{ bin_dir }}/ctr -n=k8s.io images import /opt/kube/images/{{ dns_offline }}"
          when: 'dns_offline in image_info.stdout and CONTAINER_RUNTIME == "containerd"'
    - name: 创建{{ dns_backend }}部署
      shell: "{{ base_dir }}/plugins/kube/kubectl apply -f {{ role_path }}/files/dns/{{ dns_backend }}.yaml --kubeconfig={{base_dir}}/.cluster/admin.kubeconfig"
      connection: local
      run_once: true
  when:
    - '"kube-dns" not in pod_info.stdout'
    - '"coredns" not in pod_info.stdout'
    - 'dns_install == "yes"'
  ignore_errors: true

- block:
    - name: 准备metrics-server部署Yaml文件
      template: src={{ item }}.yaml.j2 dest={{ role_path }}/files/metrics-server/{{ item }}.yaml
      with_items:
        - metrics-server-deployment
      connection: local
      run_once: true
    - block:
        - name: 尝试推送离线 metrics-server镜像（若执行失败，可忽略）
          copy: src={{ base_dir }}/requires/{{ metricsserver_offline }} dest=/opt/kube/images/{{ metricsserver_offline }}
          when: 'metricsserver_offline in download_info.stdout'
        - name: 获取metrics-server离线镜像推送情况
          command: "ls /opt/kube/images"
          register: image_info
        - name: 导入 metrics-server的离线镜像（若执行失败，可忽略）
          shell: "{{ bin_dir }}/docker load -i /opt/kube/images/{{ metricsserver_offline }}"
          when: 'metricsserver_offline in image_info.stdout and CONTAINER_RUNTIME == "docker"'
        - name: 导入 metrics-server的离线镜像（若执行失败，可忽略）
          shell: "{{ bin_dir }}/ctr -n=k8s.io images import /opt/kube/images/{{ metricsserver_offline }}"
          when: 'metricsserver_offline in image_info.stdout and CONTAINER_RUNTIME == "containerd"'
    - name: 创建 metrics-server部署
      shell: "{{ base_dir }}/plugins/kube/kubectl apply -f {{ role_path }}/files/metrics-server --kubeconfig={{base_dir}}/.cluster/admin.kubeconfig"
      run_once: true
      connection: local
  when: '"metrics-server" not in pod_info.stdout and metricsserver_install == "yes"'
  ignore_errors: true

# dashboard v2.x.x 不依赖于heapster
- block:
    - name: 准备Dashboard部署Yaml文件
      template: src={{ item }}.yaml.j2 dest={{ role_path }}/files/dashboard/{{ item }}.yaml
      with_items:
        - kube-dashboard
      connection: local
      run_once: true
    - block:
        - name: 尝试推送离线 dashboard 镜像（若执行失败，可忽略）
          copy: src={{ base_dir }}/requires/{{ item }} dest=/opt/kube/images/{{ item }}
          when: 'item in download_info.stdout'
          with_items:
            - "{{ dashboard_offline }}"
            - "{{ metricsscraper_offline }}"

        - name: 获取dashboard离线镜像推送情况
          command: "ls /opt/kube/images"
          register: image_info

        - name: 导入 dashboard 的离线镜像（docker）
          shell: "{{ bin_dir }}/docker load -i /opt/kube/images/{{ item }}"
          with_items:
            - "{{ dashboard_offline }}"
            - "{{ metricsscraper_offline }}"
          when: "item in image_info.stdout and CONTAINER_RUNTIME == 'docker'"

        - name: 导入 dashboard 的离线镜像（containerd）
          shell: "{{ bin_dir }}/ctr -n=k8s.io images import /opt/kube/images/{{ item }}"
          with_items:
            - "{{ dashboard_offline }}"
            - "{{ metricsscraper_offline }}"
          when: "item in image_info.stdout and CONTAINER_RUNTIME == 'containerd'"
    - name: 创建 dashboard部署
      shell: "{{ base_dir }}/plugins/kube/kubectl apply -f {{ role_path }}/files/dashboard --kubeconfig={{base_dir}}/.cluster/admin.kubeconfig"
      connection: local
      run_once: true
  when: '"kubernetes-dashboard" not in pod_info.stdout and dashboard_install == "yes"'
  ignore_errors: true

- import_tasks: ingress.yml
  when: '"ingress-controller" not in pod_info.stdout and ingress_install == "yes"'
