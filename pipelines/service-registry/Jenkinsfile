pipeline {
    agent any

    tools {
        jdk 'Default'
        maven 'Default'
    }


    environment {
        K8S_CONFIG = credentials('jenkins-k8s-config')
        DOCKER_REGISTRY = '192.168.33.10'
        NAMESPACE = 'cloud'
        EUREKA_SERVICE_ADDRESS = 'http://eureka-0.eureka:8761/eureka/,http://eureka-1.eureka:8761/eureka/'
        EUREKA_REPLICAS = '2'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'bitbucket.account', url: 'https://caijh@bitbucket.org/bytebinary/service-registry.git']]])
            }
        }

        stage('Build') {
            steps {
                script {
                    build_tag = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                    sh "mvn clean package -Dmaven.test.skip=true -Ddocker.image.tag=${build_tag} dockerfile:build"
                }
            }
        }

        stage('Push') {
            when {
              expression {
                currentBuild.result == 'SUCCESS' 
              }
            }
            steps {
                echo 'push image to docker registry'
                script {
                    def project = readMavenPom()
                    def build_tag = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                    def image_name = "${project.properties['docker.image.prefix']}/${project.name}:${build_tag}"
                    def new_image_name = "${DOCKER_REGISTRY}/${image_name}"
                    withCredentials([usernamePassword(credentialsId: 'docker-registry', passwordVariable: 'dockerPassword', usernameVariable: 'dockerUser')]) {
                        sh "docker login -u ${dockerUser} -p ${dockerPassword} ${DOCKER_REGISTRY}"
                        sh "docker tag ${image_name} ${new_image_name}"
                        sh "docker push ${new_image_name}"
                    }
                }
            }
        }

        stage('Deploy Check') {
            steps {
                echo 'deploy check...'
            }
        }

        stage('Deploy backup') {
            steps {
                echo 'deploy backup...'
            }
        }

        stage('Deploy') {
            steps {
                echo 'start deploy...'
                script {
                    def project = readMavenPom()
                    def build_tag = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                    def appimage = "${project.properties['docker.image.prefix']}/${project.name}"
                    def new_appimage = "${DOCKER_REGISTRY}/${appimage}"
                    // sh "mkdir -p ~/.kube"
                    // sh "echo ${K8S_CONFIG} | base64 -d > ~/.kube/config"
                    sh "sed -e 's#{NAMESPACE}#${NAMESPACE}#g;s#{EUREKA_SERVICE_ADDRESS}#${EUREKA_SERVICE_ADDRESS}#g;s#{EUREKA_REPLICAS}#${EUREKA_REPLICAS}#g;s#{IMAGE}#${new_appimage}#g;s#{IMAGE_TAG}#${build_tag}#g' ${env.DEPLOYMENT_HOME}/../charts/service-registry/V1.0/k8s/service-registry.tpl > k8s-deployment.yml"
                    sh "${env.DEPLOYMENT_HOME}/../plugins/kube/kubectl apply -f k8s-deployment.yml"
                }
            }
            post {
                failure {
                    echo 'rollbacking'

                }
            }
        }

    }
    post {
        aways {
            sh "docker ps -a|grep Exited|awk '{print \$1}'|xargs -I {} docker rm {}"
            sh "docker images|grep '<none>'|awk '{print \$3}'|xargs -I {} docker image rm {} > /dev/null 2>&1 || true"
            cleanWs()
        }
    }
}